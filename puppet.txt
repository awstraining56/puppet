it always work with pull mechanism

server ---- > agent

RunInterval == 30 minutes (1800 seconds)

--> puppet describe resource user
--> puppet resource --type 
           list of resource
--> puppet resource file <file name>
--> puppet config print (print the configurations)




to create a user:
name = myuser
home =/opt/<user>
shell = /bin/bash
group = groups


Sysntax:----

Resource { "name":
	
attribute1 ==> 'parameter1',
attribute2 ==> 'parameter2',
	}


example:----

user {"master":
	ensure==> 'present'
}


On the puppet server   (port 8140 )
=========================
1. Install the repo and pkgs.


sudo rpm -Uvh https://yum.puppet.com/puppet5/puppet5-release-el-7.noarch.rpm

2. Install the puppet server

   yum install puppetserver

3. Change the memory limit to minimum to run the puppet:

   vi /etc/sysconfig/puppetserver

  goto the line which starts with the below string:

  replace 2g with 512m

  JAVA_ARGS="-Xms2g -Xmx2g"


On the clien side:
======================

1. Install the repos:


sudo rpm -Uvh https://yum.puppet.com/puppet5/puppet5-release-el-7.noarch.rpm

2. Install the agent and configure:

   yum install puppet

   Systemctl restart puppet

3. Enable the server communication:

   vi /etc/puppetlabs/puppet/puppet.conf

   goto last line and add the below entry

   server = <puppet server name>

4. Restart the puppet agent.

On the server side : Signing the agent
=====================

   puppet cert list --all ==> it should show the client certficate.

   copy the client certificate and paste

   puppet cert sign "client certficate"

    OR
   puppet cert  sign --all







puppet version:
===============
3.6
3.8
4.0
5.3
5.5
6.0

to check the puppet version ==>> puppet --version

puppet describe resource user  | less


puppet code : DSL(domain specific lanuage)
============
---create manifest
	vi <file>.pp

user { "myusertest":
	ensure ==>'present',
	managehome==> 'true'
      }



stepes to 
1 gather the resource
2 write the manifest
3 validate the code   :   puppet parser validate <file name>
4 test run/ test execution / dry run :  puppet apply <file> --noop
5 apply the code







it always work with pull mechanism

server ---- > agent

RunInterval == 30 minutes (1800 seconds)

--> puppet describe resource user
--> puppet resource --type 
           list of resource
--> puppet resource file <file name>
--> puppet config print (print the configurations)




to create a user:
name = myuser
home =/opt/<user>
shell = /bin/bash
group = groups


Sysntax:----

Resource { "name":
	
attribute1 ==> 'parameter1',
attribute2 ==> 'parameter2',
	}


example:----

user {"master":
	ensure==> 'present'
}


On the puppet server   (port 8140 )
=========================
1. Install the repo and pkgs.


sudo rpm -Uvh https://yum.puppet.com/puppet5/puppet5-release-el-7.noarch.rpm

2. Install the puppet server

   yum install puppetserver

3. Change the memory limit to minimum to run the puppet:

   vi /etc/sysconfig/puppetserver

  goto the line which starts with the below string:

  replace 2g with 512m

  JAVA_ARGS="-Xms2g -Xmx2g"


On the clien side:
======================

1. Install the repos:


sudo rpm -Uvh https://yum.puppet.com/puppet5/puppet5-release-el-7.noarch.rpm

2. Install the agent and configure:

   yum install puppet

   Systemctl restart puppet

3. Enable the server communication:

   vi /etc/puppetlabs/puppet/puppet.conf

   goto last line and add the below entry

   server = <puppet server name>

4. Restart the puppet agent.

On the server side : Signing the agent
=====================

   puppet cert list --all ==> it should show the client certficate.

   copy the client certificate and paste

   puppet cert sign "client certficate"

    OR
   puppet cert  sign --all







puppet version:
===============
3.6
3.8
4.0
5.3
5.5
6.0

to check the puppet version ==>> puppet --version

puppet describe resource user  | less


puppet code : DSL(domain specific lanuage)
============
---create manifest
	vi <file>.pp

user { "myusertest":
	ensure =>'present',
	managehome=> 'true'
      }



stepes to 
1 gather the resource
2 write the manifest
3 validate the code   :   puppet parser validate <file name>
4 test run/ test execution / dry run :  puppet apply <file> --noop
5 apply the code



puppet code deployment 
======================
pre-requiste : -  puppet client-server comminication


1. site.pp: host group deployment
	declare the resource
	
	
(for older version of puppet)
file location /etc/puppet/manifest/site.pp 

(for new version)

file location /etc/puppetlabs/code/environment/production/manifest/site.pp 


example: 

user { "testuser":
		ensure=>'present',
		managehome=>'true',
	 }

(for validating the code )

puppet parser validate site.pp	 
	 
for the deploymentfor the agent go to the client server 
======================================================

puppet agent -t 


to check the config of run interval 
puppet config print | grep -i interval 

chaning run config interval

puppet config set runinterval 60


this is to create file in specified location example


file {"/root/myfile":

	ensure => 'file'
	
	}
	
	
	
file {"/root/mydirectory":
		ensure=> 'directory',
	}



generating encrypting password 
openssl passwd -crypt
passwd 


enter this code in the puppet


creating group.



puppet resource group root (help command)


for directory 
=======
file{"/root/mydirectory":
  ensure => 'directory',
  owner => 'testuser2',
  group => 'mygroup2',
  mode => '0755'
    }


for file 
=======

file{"/root/myfile":
  ensure => 'file',
  owner => 'testuser2',
  group => 'mygroup2',
  mode => '0660',
  content => "This is the my file content\n"
    }

	
	
for group 

group{"mygroup1":
  ensure => 'present'
     }

	 
for user 


user{"testuser2":
  ensure => 'present',
  managehome => true,
  password => "qU.RNVsAyU.5Q",
  groups => ['mygroup1','mygroup2'],
  home => '/root/mydirectory',
  gid => 'mygroup1',
  uid => "10500"
   }

   
 
 
 
 
 puppet agent -t   >>>>remote deployment
 
 puppet apply file_user.pp    >>>>> local deplyoment 
 
 
 
 manifest execution :   (order of execution will be decided by the puppet)
 ======================
 
 file { "file123":
	ensure  => 'file'
	owner => 'user123'
	}
	
user {"user123":
	ensure => 'present',
	managehome =>true
	
	}
 
 
 Resource Dependancies --->>>>to controle the execution:
 =============================================
 
 Require
 Before
 Nofify
 Subscribe
 
 
 
#To create the users with the below requriements.
# primary group = group1
#secondary group = group2
#User name = newuser

user{"newuser2":
     ensure => 'present',
     groups => 'group3',
     home => '/root/newuser2',
     managehome => true,
     #require => Group['group1','group2']
    }
group{"group3":
     ensure => 'present',
     #before => User['newuser']
     }
file {"/root/newuser2":
       ensure => 'directory'
      }

   

custom facters:
==> key, value pars.

key = value
user_logged_in =20
root_disk_space =50%

#to check the user logged into system
echo "users_logged_in=$(who | wc -l)"


#to chec the disk space
echo "root_disk_space=$(df -h /|awk '{print $5}' | grep -v Use)"




2 locations to define custome facters 
======================================
/etc/facter/facts.d/
or
/etc/puppetlabs/puppet/facter/facts.d/

mkdir -p /etc/facter/facts.d/
or
mkdir -p /etc/puppetlabs/facer/facts.de/



#user logged in 
#!/bin/bash
echo "User_logged_in=$(who | wc -l)"

#save as userloggedin.sh

chmod 775 userloggedin.sh

facter | grep -i User_logged

#disk space usage
[root@ip-172-31-89-81 facts.d]# vim disk_space.sh
#!/bin/bash
echo "root_disk_space=$(df -h /|awk '{print $5}' | grep -i -v use)"

#save as diskspace.sh 


facter | grep -i root_disk


#disk space


puppet conditionals:
=======================

Requirements : to create user or install package on differnet os flavors -


	if <condition> {                            if $::osfamily == 'redhat': #calling parameter $:: is calling factor into code

	variable1 => value

	}
	else {

	variable1 => value

	}

	resource { "name":
		attribute => 'value'
	}




ex:-----

condition_if.pp
===================
case $::osfamily  {
        'RedHat': {

        $package  = sudo
        $user = Linuxuser
        }

        'Debin':{
        $package = devinstall
        $user = debianuser
        }

        'Windows':{
        $package = apache
        $user = Windowsuser
        }

default:
        {
        $package = none
        $user = dafaultuser
        }
}
#package installation

package { $package:
        ensure => present,
        }

user {$user:
        ensure => 'present',
        managehome=> true,
}





case condition
==========================================

case $::osfamily {

        'RedHat': {

      $package = sudo
      $user = myuser1
        }

         'Debin': {
      $package = devinstall
      $user = debianuser
         }

          'Windows': {
      $package = apache
      $user = windowsuser
         }

   default: {

     $package = none
     $user = defaultuser

   }
}

#To install the package.

  package {$package:
     ensure => present
      }
  user{$user:
     ensure => 'present',
     managehome => true
     }



============================

1 variable declaration
2 control structure.
3 functions



in puppet function is replace with the class key word.


function <name> {

block of the code 
}


fucntion <name> ===>  to call the function standard way. 

name  => to call the funcation in shell scripts



class <name of the class> {

resource declaration
}

incude <name of the class>

 



ex:==========================

====================


#to define the class funtionality. 

class user {

	user{"classuser1":
	ensure => 'present',
	managehome => 'true'
	}
	
	group {"mygroup_class":
	ensure => 'present',
	gid => 10534
	}

}

# to call the class of function. 

include user	














